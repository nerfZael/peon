/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestPeonProxyInterface extends ethers.utils.Interface {
  functions: {
    "deposit()": FunctionFragment;
    "owner()": FunctionFragment;
    "peonAddress()": FunctionFragment;
    "peonFee()": FunctionFragment;
    "query(string,bytes32,bytes,address,bytes4,uint256)": FunctionFragment;
    "respond()": FunctionFragment;
    "setPeon(address)": FunctionFragment;
    "setPeonFee(uint256)": FunctionFragment;
    "userBalances(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "peonAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "peonFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "query",
    values: [string, BytesLike, BytesLike, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "respond", values?: undefined): string;
  encodeFunctionData(functionFragment: "setPeon", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPeonFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "peonAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "peonFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "query", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "respond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPeon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPeonFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Query(uint256,string,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Query"): EventFragment;
}

export type QueryEvent = TypedEvent<
  [BigNumber, string, string, string] & {
    queryId: BigNumber;
    packageUri: string;
    func: string;
    args: string;
  }
>;

export class TestPeonProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestPeonProxyInterface;

  functions: {
    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    peonAddress(overrides?: CallOverrides): Promise<[string]>;

    peonFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    query(
      packageUri: string,
      func: BytesLike,
      args: BytesLike,
      callbackAddress: string,
      callbackFunc: BytesLike,
      callbackGasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    respond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPeon(
      _peonAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPeonFee(
      _peonFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userBalances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  peonAddress(overrides?: CallOverrides): Promise<string>;

  peonFee(overrides?: CallOverrides): Promise<BigNumber>;

  query(
    packageUri: string,
    func: BytesLike,
    args: BytesLike,
    callbackAddress: string,
    callbackFunc: BytesLike,
    callbackGasLimit: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  respond(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPeon(
    _peonAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPeonFee(
    _peonFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    peonAddress(overrides?: CallOverrides): Promise<string>;

    peonFee(overrides?: CallOverrides): Promise<BigNumber>;

    query(
      packageUri: string,
      func: BytesLike,
      args: BytesLike,
      callbackAddress: string,
      callbackFunc: BytesLike,
      callbackGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    respond(overrides?: CallOverrides): Promise<void>;

    setPeon(_peonAddress: string, overrides?: CallOverrides): Promise<void>;

    setPeonFee(
      _peonFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Query(uint256,string,bytes32,bytes)"(
      queryId?: null,
      packageUri?: null,
      func?: null,
      args?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { queryId: BigNumber; packageUri: string; func: string; args: string }
    >;

    Query(
      queryId?: null,
      packageUri?: null,
      func?: null,
      args?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { queryId: BigNumber; packageUri: string; func: string; args: string }
    >;
  };

  estimateGas: {
    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    peonAddress(overrides?: CallOverrides): Promise<BigNumber>;

    peonFee(overrides?: CallOverrides): Promise<BigNumber>;

    query(
      packageUri: string,
      func: BytesLike,
      args: BytesLike,
      callbackAddress: string,
      callbackFunc: BytesLike,
      callbackGasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    respond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPeon(
      _peonAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPeonFee(
      _peonFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peonAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peonFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    query(
      packageUri: string,
      func: BytesLike,
      args: BytesLike,
      callbackAddress: string,
      callbackFunc: BytesLike,
      callbackGasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    respond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPeon(
      _peonAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPeonFee(
      _peonFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
