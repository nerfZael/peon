/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { UserContract, UserContractInterface } from "../UserContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_peonAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "queryId",
        type: "bytes32",
      },
    ],
    name: "Query",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "queryId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "response",
        type: "string",
      },
    ],
    name: "Response",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "queryId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "responseStr",
        type: "string",
      },
    ],
    name: "callback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestQuery",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "exists",
            type: "bool",
          },
          {
            internalType: "string",
            name: "responseStr",
            type: "string",
          },
        ],
        internalType: "struct UserContract.QueryInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestQueryId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "queryInfos",
    outputs: [
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
      {
        internalType: "string",
        name: "responseStr",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "packageUri",
        type: "string",
      },
      {
        internalType: "string",
        name: "method",
        type: "string",
      },
      {
        internalType: "string",
        name: "argStr",
        type: "string",
      },
    ],
    name: "someFunc",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e47380380610e478339818101604052810190610032919061008e565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610100565b600081519050610088816100e9565b92915050565b6000602082840312156100a057600080fd5b60006100ae84828501610079565b91505092915050565b60006100c2826100c9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f2816100b7565b81146100fd57600080fd5b50565b610d388061010f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063449ed7e01461005c5780636b55bb3214610078578063b0b251b614610096578063d86d8ebc146100b2578063f8c1e7eb146100d0575b600080fd5b610076600480360381019061007191906107af565b610101565b005b61008061023c565b60405161008d9190610b4d565b60405180910390f35b6100b060048036038101906100ab9190610807565b610315565b005b6100ba6104e5565b6040516100c79190610a79565b60405180910390f35b6100ea60048036038101906100e5919061075d565b6104eb565b6040516100f8929190610a49565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610185577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600080600085815260200190815260200160002090508060000160009054906101000a900460ff166101e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b82828260010191906101f39291906105a4565b50836002819055507f3b2b711fc9f2d7d5d5cc37ec71818c9fa6aeb9fe99ea6b60c7bb911f0a9133fa84848460405161022e93929190610a94565b60405180910390a150505050565b61024461062a565b60008060025481526020019081526020016000206040518060400160405290816000820160009054906101000a900460ff1615151515815260200160018201805461028e90610c79565b80601f01602080910402602001604051908101604052809291908181526020018280546102ba90610c79565b80156103075780601f106102dc57610100808354040283529160200191610307565b820191906000526020600020905b8154815290600101906020018083116102ea57829003601f168201915b505050505081525050905090565b6000848460405160200161032a929190610a30565b60405160208183030381529060405280519060200120905060008383604051602001610357929190610ac6565b60405160208183030381529060405290506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663418ff82a8a8a86863063449ed7e060e01b6040518763ffffffff1660e01b81526004016103d696959493929190610aea565b602060405180830381600087803b1580156103f057600080fd5b505af1158015610404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104289190610786565b905060405180604001604052806001151581526020016040518060200160405280600081525081525060008083815260200190815260200160002060008201518160000160006101000a81548160ff021916908315150217905550602082015181600101908051906020019061049f929190610646565b509050507fa99fe225feaf5d9596d58c479ab1d327c4e45b1d8a747705d601a0e736257ad4816040516104d29190610a79565b60405180910390a1505050505050505050565b60025481565b60006020528060005260406000206000915090508060000160009054906101000a900460ff169080600101805461052190610c79565b80601f016020809104026020016040519081016040528092919081815260200182805461054d90610c79565b801561059a5780601f1061056f5761010080835404028352916020019161059a565b820191906000526020600020905b81548152906001019060200180831161057d57829003601f168201915b5050505050905082565b8280546105b090610c79565b90600052602060002090601f0160209004810192826105d25760008555610619565b82601f106105eb57803560ff1916838001178555610619565b82800160010185558215610619579182015b828111156106185782358255916020019190600101906105fd565b5b50905061062691906106cc565b5090565b6040518060400160405280600015158152602001606081525090565b82805461065290610c79565b90600052602060002090601f01602090048101928261067457600085556106bb565b82601f1061068d57805160ff19168380011785556106bb565b828001600101855582156106bb579182015b828111156106ba57825182559160200191906001019061069f565b5b5090506106c891906106cc565b5090565b5b808211156106e55760008160009055506001016106cd565b5090565b6000813590506106f881610ceb565b92915050565b60008151905061070d81610ceb565b92915050565b60008083601f84011261072557600080fd5b8235905067ffffffffffffffff81111561073e57600080fd5b60208301915083600182028301111561075657600080fd5b9250929050565b60006020828403121561076f57600080fd5b600061077d848285016106e9565b91505092915050565b60006020828403121561079857600080fd5b60006107a6848285016106fe565b91505092915050565b6000806000604084860312156107c457600080fd5b60006107d2868287016106e9565b935050602084013567ffffffffffffffff8111156107ef57600080fd5b6107fb86828701610713565b92509250509250925092565b6000806000806000806060878903121561082057600080fd5b600087013567ffffffffffffffff81111561083a57600080fd5b61084689828a01610713565b9650965050602087013567ffffffffffffffff81111561086557600080fd5b61087189828a01610713565b9450945050604087013567ffffffffffffffff81111561089057600080fd5b61089c89828a01610713565b92509250509295509295509295565b6108b481610bc3565b82525050565b6108c381610bd5565b82525050565b6108d281610bd5565b82525050565b6108e181610be1565b82525050565b6108f081610beb565b82525050565b600061090182610b6f565b61090b8185610b85565b935061091b818560208601610c46565b61092481610cda565b840191505092915050565b600061093b8385610ba7565b9350610948838584610c37565b61095183610cda565b840190509392505050565b60006109688385610bb8565b9350610975838584610c37565b82840190509392505050565b600061098c82610b7a565b6109968185610b96565b93506109a6818560208601610c46565b6109af81610cda565b840191505092915050565b60006109c582610b7a565b6109cf8185610ba7565b93506109df818560208601610c46565b6109e881610cda565b840191505092915050565b6000604083016000830151610a0b60008601826108ba565b5060208301518482036020860152610a238282610981565b9150508091505092915050565b6000610a3d82848661095c565b91508190509392505050565b6000604082019050610a5e60008301856108c9565b8181036020830152610a7081846109ba565b90509392505050565b6000602082019050610a8e60008301846108d8565b92915050565b6000604082019050610aa960008301866108d8565b8181036020830152610abc81848661092f565b9050949350505050565b60006020820190508181036000830152610ae181848661092f565b90509392505050565b600060a0820190508181036000830152610b0581888a61092f565b9050610b1460208301876108d8565b8181036040830152610b2681866108f6565b9050610b3560608301856108ab565b610b4260808301846108e7565b979650505050505050565b60006020820190508181036000830152610b6781846109f3565b905092915050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610bce82610c17565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015610c64578082015181840152602081019050610c49565b83811115610c73576000848401525b50505050565b60006002820490506001821680610c9157607f821691505b60208210811415610ca557610ca4610cab565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b610cf481610be1565b8114610cff57600080fd5b5056fea26469706673582212205a7a7c6a9d04f2f58bd98cc039d6193c08694b38208df335f64635533eec162264736f6c63430008040033";

export class UserContract__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _peonAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UserContract> {
    return super.deploy(_peonAddress, overrides || {}) as Promise<UserContract>;
  }
  getDeployTransaction(
    _peonAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_peonAddress, overrides || {});
  }
  attach(address: string): UserContract {
    return super.attach(address) as UserContract;
  }
  connect(signer: Signer): UserContract__factory {
    return super.connect(signer) as UserContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserContractInterface {
    return new utils.Interface(_abi) as UserContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserContract {
    return new Contract(address, _abi, signerOrProvider) as UserContract;
  }
}
