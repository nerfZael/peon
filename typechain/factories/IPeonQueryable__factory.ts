/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IPeonQueryable,
  IPeonQueryableInterface,
} from "../IPeonQueryable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "queryId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "packageUri",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "func",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "args",
        type: "bytes",
      },
    ],
    name: "Query",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "packageUri",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "func",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "args",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "callbackAddress",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "callbackFunc",
        type: "bytes4",
      },
      {
        internalType: "uint256",
        name: "callbackGasLimit",
        type: "uint256",
      },
    ],
    name: "query",
    outputs: [
      {
        internalType: "uint256",
        name: "queryId",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

export class IPeonQueryable__factory {
  static readonly abi = _abi;
  static createInterface(): IPeonQueryableInterface {
    return new utils.Interface(_abi) as IPeonQueryableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPeonQueryable {
    return new Contract(address, _abi, signerOrProvider) as IPeonQueryable;
  }
}
