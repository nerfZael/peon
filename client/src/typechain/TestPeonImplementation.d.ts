/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestPeonImplementationInterface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "query(string,bytes32,bytes,address,bytes4,uint256)": FunctionFragment;
    "queryFee()": FunctionFragment;
    "respond(uint256,bytes32,bytes)": FunctionFragment;
    "setQueryFee(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "query",
    values: [string, BytesLike, BytesLike, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "queryFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "respond",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setQueryFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "query", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queryFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "respond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setQueryFee",
    data: BytesLike
  ): Result;

  events: {
    "Query(uint256,string,bytes32,bytes)": EventFragment;
    "Response(uint256,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Query"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Response"): EventFragment;
}

export type QueryEvent = TypedEvent<
  [BigNumber, string, string, string] & {
    queryId: BigNumber;
    packageUri: string;
    func: string;
    args: string;
  }
>;

export type ResponseEvent = TypedEvent<
  [BigNumber, string, string] & {
    queryId: BigNumber;
    executor: string;
    responseHash: string;
  }
>;

export class TestPeonImplementation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestPeonImplementationInterface;

  functions: {
    owner(overrides?: CallOverrides): Promise<[string]>;

    query(
      packageUri: string,
      func: BytesLike,
      args: BytesLike,
      callbackAddress: string,
      callbackFunc: BytesLike,
      callbackGasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    respond(
      queryId: BigNumberish,
      responseHash: BytesLike,
      response: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setQueryFee(
      _queryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  owner(overrides?: CallOverrides): Promise<string>;

  query(
    packageUri: string,
    func: BytesLike,
    args: BytesLike,
    callbackAddress: string,
    callbackFunc: BytesLike,
    callbackGasLimit: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queryFee(overrides?: CallOverrides): Promise<BigNumber>;

  respond(
    queryId: BigNumberish,
    responseHash: BytesLike,
    response: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setQueryFee(
    _queryFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>;

    query(
      packageUri: string,
      func: BytesLike,
      args: BytesLike,
      callbackAddress: string,
      callbackFunc: BytesLike,
      callbackGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryFee(overrides?: CallOverrides): Promise<BigNumber>;

    respond(
      queryId: BigNumberish,
      responseHash: BytesLike,
      response: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setQueryFee(
      _queryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Query(uint256,string,bytes32,bytes)"(
      queryId?: null,
      packageUri?: null,
      func?: null,
      args?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { queryId: BigNumber; packageUri: string; func: string; args: string }
    >;

    Query(
      queryId?: null,
      packageUri?: null,
      func?: null,
      args?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { queryId: BigNumber; packageUri: string; func: string; args: string }
    >;

    "Response(uint256,address,bytes32)"(
      queryId?: null,
      executor?: null,
      responseHash?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { queryId: BigNumber; executor: string; responseHash: string }
    >;

    Response(
      queryId?: null,
      executor?: null,
      responseHash?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { queryId: BigNumber; executor: string; responseHash: string }
    >;
  };

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    query(
      packageUri: string,
      func: BytesLike,
      args: BytesLike,
      callbackAddress: string,
      callbackFunc: BytesLike,
      callbackGasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queryFee(overrides?: CallOverrides): Promise<BigNumber>;

    respond(
      queryId: BigNumberish,
      responseHash: BytesLike,
      response: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setQueryFee(
      _queryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    query(
      packageUri: string,
      func: BytesLike,
      args: BytesLike,
      callbackAddress: string,
      callbackFunc: BytesLike,
      callbackGasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    respond(
      queryId: BigNumberish,
      responseHash: BytesLike,
      response: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setQueryFee(
      _queryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
