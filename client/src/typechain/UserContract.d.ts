/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UserContractInterface extends ethers.utils.Interface {
  functions: {
    "callback(uint256,string)": FunctionFragment;
    "getLatestQuery()": FunctionFragment;
    "latestQueryId()": FunctionFragment;
    "queryInfos(uint256)": FunctionFragment;
    "someFunc(string,string,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "callback",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestQuery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestQueryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "someFunc",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "callback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLatestQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestQueryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "someFunc", data: BytesLike): Result;

  events: {
    "Query(uint256)": EventFragment;
    "Response(uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Query"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Response"): EventFragment;
}

export type QueryEvent = TypedEvent<[BigNumber] & { queryId: BigNumber }>;

export type ResponseEvent = TypedEvent<
  [BigNumber, string] & { queryId: BigNumber; response: string }
>;

export class UserContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UserContractInterface;

  functions: {
    callback(
      queryId: BigNumberish,
      responseStr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLatestQuery(
      overrides?: CallOverrides
    ): Promise<[[boolean, string] & { exists: boolean; responseStr: string }]>;

    latestQueryId(overrides?: CallOverrides): Promise<[BigNumber]>;

    queryInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { exists: boolean; responseStr: string }>;

    someFunc(
      packageUri: string,
      method: string,
      argStr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  callback(
    queryId: BigNumberish,
    responseStr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLatestQuery(
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { exists: boolean; responseStr: string }>;

  latestQueryId(overrides?: CallOverrides): Promise<BigNumber>;

  queryInfos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { exists: boolean; responseStr: string }>;

  someFunc(
    packageUri: string,
    method: string,
    argStr: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    callback(
      queryId: BigNumberish,
      responseStr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getLatestQuery(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { exists: boolean; responseStr: string }>;

    latestQueryId(overrides?: CallOverrides): Promise<BigNumber>;

    queryInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { exists: boolean; responseStr: string }>;

    someFunc(
      packageUri: string,
      method: string,
      argStr: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Query(uint256)"(
      queryId?: null
    ): TypedEventFilter<[BigNumber], { queryId: BigNumber }>;

    Query(
      queryId?: null
    ): TypedEventFilter<[BigNumber], { queryId: BigNumber }>;

    "Response(uint256,string)"(
      queryId?: null,
      response?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { queryId: BigNumber; response: string }
    >;

    Response(
      queryId?: null,
      response?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { queryId: BigNumber; response: string }
    >;
  };

  estimateGas: {
    callback(
      queryId: BigNumberish,
      responseStr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLatestQuery(overrides?: CallOverrides): Promise<BigNumber>;

    latestQueryId(overrides?: CallOverrides): Promise<BigNumber>;

    queryInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    someFunc(
      packageUri: string,
      method: string,
      argStr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    callback(
      queryId: BigNumberish,
      responseStr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLatestQuery(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestQueryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    someFunc(
      packageUri: string,
      method: string,
      argStr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
